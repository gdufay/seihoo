import { jsPDF } from "jspdf";

// A6 format in milimeters
const pageWidth = 10.5;
const pageHeight = 14.8;

// Utils variable
const margin = 1;
const maxLineWidth = pageWidth - margin * 2;
const maxTextHeight = pageHeight - margin * 2;
const lineHeight = 1.25;
const ptsPerCm = 28.3465;

// font size
const titleFontSize = 22;
const listFontSize = 16;
const footerFontSize = 10;

// footer
const footerText = "Generated by seihoo";

const oneLineHeight = (fontSize) => fontSize * lineHeight / ptsPerCm;

let y = margin + oneLineHeight(titleFontSize) * 2;

const ingredientMapToString = (map) => {
    let ret = "";

    map.forEach(({ quantity, unit }, name) => {
        ret += `${name.toLowerCase()}    ${quantity} ${unit.get("name")}\n`;
    })
    return ret;
}

export const generateShoppingList = (ingredientMap) => {
    const doc = new jsPDF({ unit: "cm", format: "a6", lineHeight: lineHeight })
        .setProperties({ title: "Shopping List" });
    const textLines = doc.setFont("helvetica")
        .setFontSize(listFontSize)
        .splitTextToSize(ingredientMapToString(ingredientMap), maxLineWidth);

    // Write title
    doc.setFont("helvetica", "bold")
        .setFontSize(titleFontSize)
        .text("Shopping List", margin, margin);

    // Write list
    for (const textLine of textLines) {
        doc.setFont("helvetica", "normal")
            .setFontSize(listFontSize)
            .text(textLine, margin, y);

        y += oneLineHeight(listFontSize);
        if (y >= maxTextHeight) {
            doc.addPage();
            y = margin;
        }
    }

    // Write footer
    const footerWidth = doc.getTextWidth(footerText);
    doc
        .setFontSize(footerFontSize)
        .setTextColor("#c0c4cc")
        .text(footerText, margin + (footerWidth / 2), pageHeight - margin);

    // save
    doc.save("list.pdf");
};